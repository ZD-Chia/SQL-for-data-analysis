##Introduction to Advanced SQL
*WHERE Table_A.column_name IS NULL OR Table_B.column_name IS NULL
*wanted to return unmatched rows only

SELECT *
FROM accounts a
FULL OUTER JOIN sales_reps s on a.sales_rep_id = s.id
WHERE a.sales_rep_id IS NULL OR s.id IS NULL

##JOINs with Comparison Operators

##INEQUALITY JOINs
1. write a query that left joins the accounts table and the sales_reps tables on each sale rep's ID number and joins it using the < comparison operator on accounts.primary_poc and sales_reps.name, like so:
accounts.primary_poc < sales_reps.name
The query results should be a table with three columns: the account name (e.g. Johnson Controls), the primary contact name (e.g. Cammy Sosnowski), 
and the sales representative's name (e.g. Samuel Racine). Then answer the subsequent multiple choice question.

SELECT a.name account, a.primary_poc poc, s.name sales_rep
FROM accounts a
LEFT JOIN sales_reps s ON a.sales_rep_id = s.id
AND a.primary_poc < s.name


##Self JOINs
Modify the query from the previous video, which is pre-populated in the SQL Explorer below, to perform the same interval analysis except for the web_events table. Also:

change the interval to 1 day to find those web events that occurred after, but not more than 1 day after, another web event
add a column for the channel variable in both instances of the table in your query
You can find more on the types of INTERVALS (and other date related functionality) in the Postgres documentation here.

SELECT o1.id AS o1_id,
       o1.account_id AS o1_account_id,
       o1.occurred_at AS o1_occurred_at,
       o2.id AS o2_id,
       o2.account_id AS o2_account_id,
       o2.occurred_at AS o2_occurred_at
  FROM orders o1
 LEFT JOIN orders o2
   ON o1.account_id = o2.account_id
  AND o2.occurred_at > o1.occurred_at
  AND o2.occurred_at <= o1.occurred_at + INTERVAL '28 days'
ORDER BY o1.account_id, o1.occurred_at

SELECT w1.id AS w1_id,
       w1.channel as w1_channel,
       w1.account_id AS w1_account_id,
       w1.occurred_at AS w1_occurred_at,
       w2.id AS w2_id,
       w2.channel = w2_channel
       w2.account_id AS w2_account_id,
       w2.occurred_at AS w2_occurred_at
  FROM web_events w1
 LEFT JOIN web_events w2
   ON w1.account_id = w2.account_id
  AND w2.occurred_at > w1.occurred_at
  AND w2.occurred_at <= w1.occurred_at + INTERVAL '1 day'
ORDER BY w1.account_id, w1.occurred_at

##UNION
1. Write a query that uses UNION ALL on two instances (and selecting all columns) of the accounts table. Then inspect the results and answer the subsequent quiz.
SELECT *
FROM accounts
UNION ALL
SELECT *
FROM accounts

2. Add a WHERE clause to each of the tables that you unioned in the query above, filtering the first table where name equals Walmart and filtering the second table where name equals Disney. Inspect the results then answer the subsequent quiz.
SELECT *
FROM accounts
WHERE name = 'Walmart'
UNION ALL
SELECT *
FROM accounts
WHERE name = 'Disney'

*OR can write as
SELECT * FROM accounts WHERE name = 'Walmart' OR name ='Disney'


3. Perform the union in your first query (under the Appending Data via UNION header) in a common table expression and name it double_accounts. T
hen do a COUNT the number of times a name appears in the double_accounts table. If you do this correctly, your query results should have a count of 2 for each name.
WITH double_accounts AS(SELECT *
  FROM accounts
  UNION ALL
  SELECT *
  FROM accounts)
SELECT name, COUNT(*) AS name_count
FROM double_accounts
GROUP BY 1
ORDER BY 2 DESC


##TUNING
1. LIMITING TO SMALL TIME WINDOW
2. TESTT QUERIES ON SUBSET THEN ONLY FINALISED QUERY
3. LIMITING THE AMOUNT OF DATA IN SUBQUERIES WHICH EXECUTE FIRST

4. FIND THE SMALLER SIZE TABLE THAT GOING TO BE JOIN AND EXECUTE THEN ONLY JOIN BOTH TABLE, LESS ROW TO BE PROCESS TO JOIN.
5. ADD EXPLAIN INFRONT OF QUERY TO SEE HOW LONG IT WOULD RUN

#JOINing Subqueries to Improve Performance
*AFTER DATA SET BEING AGGREGATING
SELECT DATE_TRUNC('day', o.occurred_at) AS date,
		COUNT(DISTINCT a.sales_rep_id) AS active_sales_reps,
        COUNT(DISTINCT o.id) AS orders,
        COUNT(DISTINCT w.id) AS web_visits
FROM accounts a
JOIN orders o
ON a.id= o.account_id
JOIN web_events w
ON DATE_TRUNC('day', w.occurred_at) = DATE_TRUNC('day', o.occurred_at)
GROUP BY 1
ORDER BY 1 DESC

--1000+ RESULTS--

*BEFORE
SELECT o.occurred_at AS date,
		a.sales_rep_id AS active_sales_reps,
        o.id AS orders,
        w.id AS web_visits
FROM accounts a
JOIN orders o
ON a.id= o.account_id
JOIN web_events w
ON DATE_TRUNC('day', w.occurred_at) = DATE_TRUNC('day', o.occurred_at)

ORDER BY 1 DESC

--79000+ RESULTS--


**AGGREGATED TABLE SEPARATELY
SELECT COALESCE(orders.date, web_events.date) AS date,
		orders.active_sales_reps,
        orders.orders,
        web_events.web_visits
FROM(

SELECT DATE_TRUNC('day', o.occurred_at) AS date,
		COUNT(DISTINCT a.sales_rep_id) AS active_sales_reps,
        COUNT(DISTINCT o.id) AS orders
FROM accounts a
JOIN orders o
ON a.id= o.account_id
GROUP BY 1) orders

	FULL JOIN
    
(SELECT DATE_TRUNC('day', w.occurred_at) AS date,		
        COUNT(DISTINCT w.id) AS web_visits
FROM web_events w
GROUP BY 1
) web_events
	ON web_events.date = orders.date
ORDER BY 1 DESC

--1120 results--



